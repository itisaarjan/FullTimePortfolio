#!/usr/bin/env node
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
require("source-map-support/register");
const cdk = require("aws-cdk-lib");
const portfolio_infrastructure_stack_1 = require("../lib/portfolio-infrastructure-stack");
const app = new cdk.App();
// Get configuration from context or environment variables
const bucketName = app.node.tryGetContext('bucketName') || process.env.BUCKET_NAME || 'arjan-subedi-portfolio';
const githubUsername = app.node.tryGetContext('githubUsername') || process.env.GITHUB_USERNAME || 'itisaarjan';
const githubRepoName = app.node.tryGetContext('githubRepoName') || process.env.GITHUB_REPO_NAME || 'FullTimePortfolio';
const domainName = app.node.tryGetContext('domainName') || process.env.DOMAIN_NAME || 'arjansubedi.com';
const enableCloudFront = app.node.tryGetContext('enableCloudFront') || process.env.ENABLE_CLOUDFRONT === 'true' || true;
new portfolio_infrastructure_stack_1.PortfolioInfrastructureStack(app, 'PortfolioInfrastructureStack', {
    env: {
        account: process.env.CDK_DEFAULT_ACCOUNT,
        region: process.env.CDK_DEFAULT_REGION || 'us-east-1'
    },
    bucketName,
    githubUsername,
    githubRepoName,
    domainName,
    enableCloudFront,
    description: 'Portfolio infrastructure with S3, CloudFront, and GitHub Actions OIDC',
});
// Add tags to all resources
cdk.Tags.of(app).add('Project', 'Portfolio');
cdk.Tags.of(app).add('Environment', 'Production');
cdk.Tags.of(app).add('Owner', 'Arjan Subedi');
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG9ydGZvbGlvLWluZnJhc3RydWN0dXJlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsicG9ydGZvbGlvLWluZnJhc3RydWN0dXJlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUNBLHVDQUFxQztBQUNyQyxtQ0FBbUM7QUFDbkMsMEZBQXFGO0FBRXJGLE1BQU0sR0FBRyxHQUFHLElBQUksR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDO0FBRTFCLDBEQUEwRDtBQUMxRCxNQUFNLFVBQVUsR0FBRyxHQUFHLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxZQUFZLENBQUMsSUFBSSxPQUFPLENBQUMsR0FBRyxDQUFDLFdBQVcsSUFBSSx3QkFBd0IsQ0FBQztBQUMvRyxNQUFNLGNBQWMsR0FBRyxHQUFHLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLE9BQU8sQ0FBQyxHQUFHLENBQUMsZUFBZSxJQUFJLFlBQVksQ0FBQztBQUMvRyxNQUFNLGNBQWMsR0FBRyxHQUFHLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLE9BQU8sQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLElBQUksbUJBQW1CLENBQUM7QUFDdkgsTUFBTSxVQUFVLEdBQUcsR0FBRyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsWUFBWSxDQUFDLElBQUksT0FBTyxDQUFDLEdBQUcsQ0FBQyxXQUFXLElBQUksaUJBQWlCLENBQUM7QUFDeEcsTUFBTSxnQkFBZ0IsR0FBRyxHQUFHLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLE9BQU8sQ0FBQyxHQUFHLENBQUMsaUJBQWlCLEtBQUssTUFBTSxJQUFJLElBQUksQ0FBQztBQUV4SCxJQUFJLDZEQUE0QixDQUFDLEdBQUcsRUFBRSw4QkFBOEIsRUFBRTtJQUNwRSxHQUFHLEVBQUU7UUFDSCxPQUFPLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxtQkFBbUI7UUFDeEMsTUFBTSxFQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMsa0JBQWtCLElBQUksV0FBVztLQUN0RDtJQUNELFVBQVU7SUFDVixjQUFjO0lBQ2QsY0FBYztJQUNkLFVBQVU7SUFDVixnQkFBZ0I7SUFDaEIsV0FBVyxFQUFFLHVFQUF1RTtDQUNyRixDQUFDLENBQUM7QUFFSCw0QkFBNEI7QUFDNUIsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLFNBQVMsRUFBRSxXQUFXLENBQUMsQ0FBQztBQUM3QyxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsYUFBYSxFQUFFLFlBQVksQ0FBQyxDQUFDO0FBQ2xELEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxPQUFPLEVBQUUsY0FBYyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIjIS91c3IvYmluL2VudiBub2RlXG5pbXBvcnQgJ3NvdXJjZS1tYXAtc3VwcG9ydC9yZWdpc3Rlcic7XG5pbXBvcnQgKiBhcyBjZGsgZnJvbSAnYXdzLWNkay1saWInO1xuaW1wb3J0IHsgUG9ydGZvbGlvSW5mcmFzdHJ1Y3R1cmVTdGFjayB9IGZyb20gJy4uL2xpYi9wb3J0Zm9saW8taW5mcmFzdHJ1Y3R1cmUtc3RhY2snO1xuXG5jb25zdCBhcHAgPSBuZXcgY2RrLkFwcCgpO1xuXG4vLyBHZXQgY29uZmlndXJhdGlvbiBmcm9tIGNvbnRleHQgb3IgZW52aXJvbm1lbnQgdmFyaWFibGVzXG5jb25zdCBidWNrZXROYW1lID0gYXBwLm5vZGUudHJ5R2V0Q29udGV4dCgnYnVja2V0TmFtZScpIHx8IHByb2Nlc3MuZW52LkJVQ0tFVF9OQU1FIHx8ICdhcmphbi1zdWJlZGktcG9ydGZvbGlvJztcbmNvbnN0IGdpdGh1YlVzZXJuYW1lID0gYXBwLm5vZGUudHJ5R2V0Q29udGV4dCgnZ2l0aHViVXNlcm5hbWUnKSB8fCBwcm9jZXNzLmVudi5HSVRIVUJfVVNFUk5BTUUgfHwgJ2l0aXNhYXJqYW4nO1xuY29uc3QgZ2l0aHViUmVwb05hbWUgPSBhcHAubm9kZS50cnlHZXRDb250ZXh0KCdnaXRodWJSZXBvTmFtZScpIHx8IHByb2Nlc3MuZW52LkdJVEhVQl9SRVBPX05BTUUgfHwgJ0Z1bGxUaW1lUG9ydGZvbGlvJztcbmNvbnN0IGRvbWFpbk5hbWUgPSBhcHAubm9kZS50cnlHZXRDb250ZXh0KCdkb21haW5OYW1lJykgfHwgcHJvY2Vzcy5lbnYuRE9NQUlOX05BTUUgfHwgJ2FyamFuc3ViZWRpLmNvbSc7XG5jb25zdCBlbmFibGVDbG91ZEZyb250ID0gYXBwLm5vZGUudHJ5R2V0Q29udGV4dCgnZW5hYmxlQ2xvdWRGcm9udCcpIHx8IHByb2Nlc3MuZW52LkVOQUJMRV9DTE9VREZST05UID09PSAndHJ1ZScgfHwgdHJ1ZTtcblxubmV3IFBvcnRmb2xpb0luZnJhc3RydWN0dXJlU3RhY2soYXBwLCAnUG9ydGZvbGlvSW5mcmFzdHJ1Y3R1cmVTdGFjaycsIHtcbiAgZW52OiB7IFxuICAgIGFjY291bnQ6IHByb2Nlc3MuZW52LkNES19ERUZBVUxUX0FDQ09VTlQsIFxuICAgIHJlZ2lvbjogcHJvY2Vzcy5lbnYuQ0RLX0RFRkFVTFRfUkVHSU9OIHx8ICd1cy1lYXN0LTEnIFxuICB9LFxuICBidWNrZXROYW1lLFxuICBnaXRodWJVc2VybmFtZSxcbiAgZ2l0aHViUmVwb05hbWUsXG4gIGRvbWFpbk5hbWUsXG4gIGVuYWJsZUNsb3VkRnJvbnQsXG4gIGRlc2NyaXB0aW9uOiAnUG9ydGZvbGlvIGluZnJhc3RydWN0dXJlIHdpdGggUzMsIENsb3VkRnJvbnQsIGFuZCBHaXRIdWIgQWN0aW9ucyBPSURDJyxcbn0pO1xuXG4vLyBBZGQgdGFncyB0byBhbGwgcmVzb3VyY2VzXG5jZGsuVGFncy5vZihhcHApLmFkZCgnUHJvamVjdCcsICdQb3J0Zm9saW8nKTtcbmNkay5UYWdzLm9mKGFwcCkuYWRkKCdFbnZpcm9ubWVudCcsICdQcm9kdWN0aW9uJyk7XG5jZGsuVGFncy5vZihhcHApLmFkZCgnT3duZXInLCAnQXJqYW4gU3ViZWRpJyk7XG4iXX0=